{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/ScrollBox.jsx","components/ErrorBoundry.jsx","containers/App.js","serviceWorker.js","index.js"],"names":["Card","props","name","email","id","className","alt","src","CardList","robots","map","robot","index","key","SearchBox","searchChange","type","placeholder","onChange","ScrollBox","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","value","fetch","then","response","json","filteredRobots","filter","toLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oTAeeA,G,YAZF,SAACC,GAAS,IACZC,EAAmBD,EAAnBC,KAAMC,EAAaF,EAAbE,MAAOC,EAAMH,EAANG,GACpB,OACI,yBAAKC,UAAU,uDACX,yBAAKC,IAAG,gBAAWF,GAAMG,IAAG,+BAA0BH,EAA1B,mBAC5B,6BACI,4BAAKF,GACL,2BAAIC,OCELK,EAVE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAClB,OACE,6BACGA,EAAOC,KAAI,SAACC,EAAOC,GAAR,OACV,kBAAC,EAAD,CAAMC,IAAKD,EAAOV,KAAMS,EAAMT,KAAMC,MAAOQ,EAAMR,MAAOC,GAAIO,EAAMP,UCS3DU,EAbG,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,aAChB,OACI,yBAAKV,UAAU,OACX,2BACIA,UAAU,gCACVW,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCJXI,G,MAHG,SAAAlB,GAChB,OAAO,yBAAKI,UAAU,aAAaJ,EAAMmB,YCkB5BC,G,kBAlBb,WAAYpB,GAAQ,IAAD,8BACjB,4CAAMA,KACDqB,MAAQ,CACXC,UAAU,GAHK,E,+EAMDC,EAAOC,GACvBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAG1B,OAAOG,KAAKJ,MAAMC,SAChB,wDAEAG,KAAKzB,MAAMmB,a,GAdUQ,cC0CZC,E,YApCb,aAAe,IAAD,8BACZ,+CAWFC,eAAiB,SAAAC,GACf,EAAKJ,SAAS,CACZK,YAAaD,EAAME,OAAOC,SAZ5B,EAAKZ,MAAQ,CACXb,OAAQ,GACRuB,YAAa,IAJH,E,iFAOO,IAAD,OAClBG,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAE,GAAI,OAAI,EAAKX,SAAS,CAAElB,OAAQ6B,S,+BAOhC,IAAD,OACDC,EAAiBb,KAAKJ,MAAMb,OAAO+B,QAAO,SAAA7B,GAC9C,OAAOA,EAAMT,KACVuC,cACAC,SAAS,EAAKpB,MAAMU,YAAYS,kBAErC,OACE,yBAAKpC,UAAU,MACb,2CACA,kBAAC,EAAD,CAAWU,aAAcW,KAAKI,iBAC9B,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUrB,OAAQ8B,W,GA9BZX,aCKEe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlB,MAAK,SAAAmB,GACjCA,EAAaC,kB","file":"static/js/main.e24f8827.chunk.js","sourcesContent":["import React from 'react';\nimport './Card.css'\nimport 'tachyons';\nconst Card = (props)=>{\n    const {name, email, id} = props;\n    return (\n        <div className=\"tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5\">\n            <img alt={`photo_${id}`} src={`https://robohash.org/${id}?size=200x200`}/>\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n};\nexport default Card;","import React from \"react\";\nimport Card from \"./Card\";\nconst CardList = ({ robots }) => {\n  return (\n    <div>\n      {robots.map((robot, index) => (\n        <Card key={index} name={robot.name} email={robot.email} id={robot.id} />\n      ))}\n    </div>\n  );\n};\n\nexport default CardList;\n","import React from 'react';\n\nconst SearchBox = ({searchChange}) =>{\n    return (\n        <div className='pa2'>\n            <input \n                className='pa3 ba b--green bg-light-blue'\n                type='search' \n                placeholder='search robots' \n                onChange={searchChange}/>\n        </div>\n        \n    );\n\n}\nexport default SearchBox;","import React from \"react\";\nimport \"./ScrollBox.css\";\nconst ScrollBox = props => {\n  return <div className=\"scrollbox\">{props.children}</div>;\n};\nexport default ScrollBox;\n","import React, { Component } from \"react\";\n\nclass ErrorBoundry extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false\n    };\n  }\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true });\n  }\n  render() {\n    return this.state.hasError ? (\n      <h1>Ooops. That is not good!</h1>\n    ) : (\n      this.props.children\n    );\n  }\n}\n\nexport default ErrorBoundry;\n","import React, { Component } from \"react\";\nimport CardList from \"../components/CardList\";\nimport SearchBox from \"../components/SearchBox\";\nimport ScrollBox from \"../components/ScrollBox\";\nimport \"./App.css\";\nimport ErrorBoundry from \"../components/ErrorBoundry\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      robots: [],\n      searchfield: \"\"\n    };\n  }\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then(response => response.json())\n      .then(json => this.setState({ robots: json }));\n  }\n  onSearchChange = event => {\n    this.setState({\n      searchfield: event.target.value\n    });\n  };\n  render() {\n    const filteredRobots = this.state.robots.filter(robot => {\n      return robot.name\n        .toLowerCase()\n        .includes(this.state.searchfield.toLowerCase());\n    });\n    return (\n      <div className=\"tc\">\n        <h1>RoboFriends</h1>\n        <SearchBox searchChange={this.onSearchChange} />\n        <ScrollBox>\n          <ErrorBoundry>\n            <CardList robots={filteredRobots} />\n          </ErrorBoundry>\n        </ScrollBox>\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}